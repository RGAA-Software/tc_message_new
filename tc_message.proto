syntax = "proto3";

package tc;

import "tc_file_transfer.proto";
import "tc_signaling_message.proto";

enum RespCode
{
	kRespCodeNone = 0;

	kRespCodeOk = 1;

	kRespCodeError = 2;
	// 超时
	kRespCodeTimeout = 3;
}

enum MessageType {
  // client -> server
  kHello = 0;
  kServerConfiguration = 2;
  kAck = 10;
  kHeartBeat = 20;
  kOnHeartBeat = 21;
  kVideoFrame = 30;
  kAudioFrame = 40;
  kKeyEvent = 50;
  kMouseEvent = 60;
  // server -> client
  kCursorInfoSync = 70;
  // client -> server
  kGamepadState = 80;
  // client statistics
  kClientStatistics = 100;
  // host panel -> client
  kOnlineGames = 120;
  // ui server hello
  kUIServerHello = 130;
  // file transfer
  kFileTransfer = 140;
  // file transfer resp
  kRespFileTransfer = 150;
  // clipboard
  kClipboardInfo = 160;
  // clipboard response
  kClipboardInfoResp = 161;
  // switch monitor
  kSwitchMonitor = 170;
  // monitor switched
  kMonitorSwitched = 180;
  // switch work mode
  kSwitchWorkMode = 190;
  // change monitor resolution
  kChangeMonitorResolution = 200;
  // change monitor resolution result
  kChangeMonitorResolutionResult = 210;
  // available resolutions for target monitor
  kAvailableResolutions = 220;
  // insert key frame
  kInsertKeyFrame = 230;
  // panel -> render
  kSyncPanelInfo = 250;
  // capture server -> host panel
  kRendererAudioSpectrum = 251;

  // file transfer begin
  kFileOperationEvent = 260;
  kFileOperateRespRename = 265;
  kFileOperateRespGetFileList = 270;
  kFileOperateRespCreateNewFolder = 280;
  kFileOperateRespExists = 285;
  kFileOperateRespDel = 290;
  kFileOperateRespBatchCreateFolders = 295;
  kFileTransRespUpload = 300;
  kFileTransRespDownload = 305;
  kFileTransDirectControl = 310;
  kFileTransDataPacket = 311;
  kFileTransDataPacketResponse = 312;
  kFileTransSaveFileException = 320;
  // file transfer end

  kReqCtrlAltDelete = 330;

  // client -> render update desktop
  kUpdateDesktop = 340;
  kHardUpdateDesktop = 341;

  //
  kClipboardReqAtBegin = 349;
  kClipboardReqBuffer = 350;
  kClipboardReqAtEnd = 351;
  kClipboardRespBuffer = 360;

  //
  kSigOfferSdpMessage = 370;
  kSigAnswerSdpMessage = 380;
  kSigIceMessage = 390;

  // client -> render 
  kSwitchFullColorMode = 460;

  // client -> render
  kStartMediaRecordClientSide = 470;
  // client -> render
  kStopMediaRecordClientSide = 471;

  // client -> render
  kModifyFps = 480;

  // render -> client
  kDisconnectConnection = 490;
}

enum VideoType {
  kNetH264 = 0;
  kNetHevc = 1;
  kNetVp9 = 2;
}

enum AudioEncodeType {
  kNetOpus = 0;
}

enum EImageFormat {
    kI420 = 0;
    kI444 = 1;
}

enum ButtonFlag {
  kNone = 0;
  kCapsLockOn = 1;
  kShiftDown = 2;
  kControlDown = 4;
  kAltDown = 8;
  kLeftMouseButtonUp = 16;
  kMiddleMouseButtonUp = 32;
  kRightMouseButtonUp = 64;
  kMouseMove = 128;
  kMouseEventWheel = 256;
  kMouseEventHWheel = 512;
  kLeftMouseButtonDown = 1024;
  kMiddleMouseButtonDown = 2048;
  kRightMouseButtonDown = 4096;
}

enum ClientType {
  kWindows = 0;
  kLinux = 1;
  kMacOS = 2;
  kAndroid = 3;
  kiOS = 4;
  kUnknown = 100;
}

enum ClientNetworkType {
  kWebsocket = 0;
  kUdpKcp = 1;
  kWebRtc = 2;
  kRelay = 3;
}

enum ClientConnectType {
  kDirect = 0;
  kSignaling = 1;
}

message Ack {
  MessageType type = 1;
  uint64 send_time = 2;
}

message Hello {
  bool enable_audio = 1;
  bool enable_video = 2;
  ClientType client_type = 3;
  bool enable_controller = 4;
  string device_name = 5;
}

message MonitorResolution {
  int32 width = 1;
  int32 height = 2;
}

message MonitorInfo {
  string name = 1;
  repeated MonitorResolution resolutions = 2;
  bool primary = 3;  // primary monitor   //to do:尚未生效
}

// render -> client
message ServerConfiguration {
  repeated MonitorInfo monitors_info = 1;
  string capturing_monitor_name = 2;
  int32 fps = 3;
  // Settings -> Security Settings
  bool file_transfer_enabled = 4;
  // Settings -> General Settings
  bool audio_enabled = 5;
  // Settings -> Security Settings
  bool can_be_operated = 6;
}

message HeartBeat {
  uint64 index = 1;
  int64 timestamp = 2;
}

message IsolatedMonitorStatisticsInfoInRender {
  string name = 1;
  int32 capture_fps = 2;
  string encoder_name = 3;
  int32 encode_fps = 4;
  int32 capture_frame_width = 5;
  int32 capture_frame_height = 6;
}

// remote device hardware information
message RdHardwareInfo {
  message RdHardwareCpu {
    string name = 1;
    string id = 2;
    uint32 num_cores = 3;
    uint32 max_clock_speed = 4;
  }

  message RdHardwareMemory {
    uint64 total_size = 1;
    uint64 used_size = 2;
  }

  message RdHardwareGpu {
    string name = 1;
    uint64 size_in_bytes = 2;
    // GB
    string size_str = 3;
    string driver_version = 4;
    string pnp_device_id = 5;
  }

  message RdHardwareDisk {
    string name = 1;
    string model = 2;
    string status = 3;
    string serial_number = 4;
    string interface_type = 5;
  }

  RdHardwareCpu cpu = 1;
  RdHardwareMemory memory = 2;
  repeated RdHardwareGpu gpus = 3;
  repeated RdHardwareDisk disks = 4;
}

message OnHeartBeat {
  uint64 index = 1;
  // keyboard information
  bool caps_lock_pressed = 10;
  int32 caps_lock_state = 11;
  bool num_lock_pressed = 20;
  int32 num_lock_state = 21;
  bool alt_pressed = 30;
  bool control_pressed = 40;
  bool win_pressed = 50;
  bool shift_pressed = 60;
  int64 timestamp = 70;
  string video_capture_type = 71;
  string audio_capture_type = 72;
  string audio_encode_type = 73;
  map<string, IsolatedMonitorStatisticsInfoInRender>  monitors_info = 80;
  string pc_info = 90;
  string desktop_name = 91;
  string os_name = 92;
  RdHardwareInfo device_info = 100;
}

message VideoFrame {
  VideoType type = 1;
  bytes data = 2;
  uint64 frame_index = 3;
  bool key = 4;
  int32 frame_width = 5;
  int32 frame_height = 6;
  string extra = 7;
  string mon_name = 9;
  int32 mon_left = 10;
  int32 mon_top = 11;
  int32 mon_right = 12;
  int32 mon_bottom = 13;
  int32 mon_index = 14;
  EImageFormat image_format = 15;
}

message AudioFrame {
  int32 samples = 1;
  int32 channels = 2;
  int32 bits = 3;
  int32 frame_size = 4;
  bytes data = 5;
  string extra = 6;
}

message KeyEvent {
  enum LockKeyStatusCheck {
    kDontCareLockKey = 0;
    kCheckNumLock = 1;
    kCheckCapsLock = 2;
  }

  // see: https://docs.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes
  uint32 key_code = 1;
  bool down = 2;
  // by GetKeyState()
  int32  num_lock_status = 3;
  int32  caps_lock_status = 4;
  LockKeyStatusCheck status_check = 5;
  int64 timestamp = 6;
}

message MouseEvent {
  // to do
  string monitor_name = 1;
  float x_ratio = 2;
  float y_ratio = 3;

  // see: https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-mouse_event
  int32 button = 4;
  // wheel
  int32 data = 5;
  int64 timestamp = 6;
  int32 delta_x = 7;
  int32 delta_y = 8;
  bool pressed = 9;
  bool released = 10;
}

message CursorInfoSync {
  enum CursorType {
    kIdcArrow = 0;
    kIdcIBeam = 1;
    kIdcWait = 2;
    kIdcCross = 3;
    kIdcUpArrow = 4;
    kIdcSize = 5;
    kIdcIcon = 6;
    kIdcSizeNWSE = 7;
    kIdcSizeNESW = 8;
    kIdcSizeWE = 9;
    kIdcSizeNS = 10;
    kIdcSizeAll = 11;
    kIdcHand = 12;
    kIdcHelp = 13;
    kIdcPin = 14;
    kIdcPerson = 15;
  }

  bool visible = 1;
  int32 x = 2;
  int32 y = 3;
  int32 hotspot_x = 4;
  int32 hotspot_y = 5;
  uint32 width = 6;
  uint32 height = 7;
  bytes bitmap = 8;
  CursorType type = 9;
}

// see: https://learn.microsoft.com/en-us/windows/win32/api/xinput/ns-xinput-xinput_gamepad
enum GamepadButton {
  GP_UNKNOWN = 0;
  GP_XINPUT_GAMEPAD_DPAD_UP = 0x0001;
  GP_XINPUT_GAMEPAD_DPAD_DOWN = 0x0002;
  GP_XINPUT_GAMEPAD_DPAD_LEFT = 0x0004;
  GP_XINPUT_GAMEPAD_DPAD_RIGHT = 0x0008;
  GP_XINPUT_GAMEPAD_START = 0x0010;
  GP_XINPUT_GAMEPAD_BACK = 0x0020;
  GP_XINPUT_GAMEPAD_LEFT_THUMB = 0x0040;
  GP_XINPUT_GAMEPAD_RIGHT_THUMB = 0x0080;
  GP_XINPUT_GAMEPAD_LEFT_SHOULDER = 0x0100;
  GP_XINPUT_GAMEPAD_RIGHT_SHOULDER = 0x0200;
  GP_XINPUT_GAMEPAD_A = 0x1000;
  GP_XINPUT_GAMEPAD_B = 0x2000;
  GP_XINPUT_GAMEPAD_X = 0x4000;
  GP_XINPUT_GAMEPAD_Y = 0x8000;
}

message GamepadState {
  enum GamepadType {
    kButtons = 0;
    kLeftTrigger = 1;
    kRightTrigger = 2;
    kLeftThumb = 3;
    kRightThumb = 4;
  }
  uint32 buttons = 1;
  uint32 left_trigger = 2;
  uint32 right_trigger = 3;
  int32 thumb_lx = 4;
  int32 thumb_ly = 5;
  int32 thumb_rx = 6;
  int32 thumb_ry = 7;
  GamepadType gp_type = 8;
}

message ClientStatistics {
  repeated uint32 decode_durations = 1;
  repeated uint32 video_recv_gaps = 2;
  uint32 fps_video_recv = 3;
  uint32 fps_render = 4;
  int64 recv_media_data = 5;
  int32 render_width = 6;
  int32 render_height = 7;
}

message OnlineGame {
  int32 game_id = 1;
  string game_exes = 2;
}

message UIServerHello {

}

message FileTransfer {
  enum FileType {
    kFile = 0;
    kFolder = 1;
  }

  enum FileTransferState {
    kRequestFileTransfer = 0;
    // transferring
    kTransferring = 1;
    // transfer over
    kTransferOver = 2;
    // stopped by user
    kTransferInterrupted = 3;
  }

  string id = 1;
  FileTransferState state = 10;
  FileType file_type = 20;
  string relative_path = 30;
  string filename = 40;
  bytes data = 50;
  uint64 filesize = 60;
  uint64 transferred_size = 70;
  string file_md5 = 80;
  string local_filepath = 90;
  uint64 timestamp = 100;
  string ref_path = 110;
  string ref_folder = 120;
}

message RespFileTransfer {
  enum FileTransferRespState {
    // it's ok
    kTransferReady = 0;
    // file already exists.
    kFileAlreadyExists = 1;
    // the file already exists, but can't delete it.
    kFileDeleteFailed = 2;
    // transferring
    kTransferring = 3;
    // after compare md5
    kTransferSuccess = 4;
    // failed
    kTransferFailed = 5;

  }
  string id = 1;
  FileTransferRespState state = 10;
  string filename = 20;
  string local_filepath = 30;
  uint64 filesize = 40;
  uint64 transferred_size = 50;
  float progress = 60;
  uint64 timestamp = 70;
}

enum ClipboardType {
  kClipboardText = 0;
  kClipboardImage = 1;
  kClipboardPixmap = 2;
  kClipboardFiles = 3;
}

message ClipboardFile {
  string file_name = 1;
  string full_path = 2;
  int64 total_size = 3;
  string ref_path = 4;
}

message ClipboardInfo {
  ClipboardType type = 1;
  bytes msg = 2;
  repeated ClipboardFile files = 3;
}

message ClipboardInfoResp {
  ClipboardType type = 1;
  bytes msg = 2;
  repeated ClipboardFile files = 3;
}

message ClipboardReqAtBegin {
  string full_name = 1;
}

message ClipboardReqBuffer {
  string full_name = 1;
  int64 req_size = 2;
  int64 req_start = 3;
  int64 req_index = 4;
}

message ClipboardReqAtEnd {
  string full_name = 1;
  bool success = 5;
}

message ClipboardRespBuffer {
  string full_name = 1;
  int64 req_size = 2;
  int64 req_start = 3;
  int64 req_index = 4;
  int64 read_size = 5;
  bytes buffer = 6;
}

message SwitchMonitor {
  string name = 1;
}

message MonitorSwitched {
  string name = 1;
  int32 index = 2;
  repeated MonitorInfo monitor_info = 3;
}

message SwitchWorkMode {
  enum WorkMode {
    kWork = 0;
    kGame = 1;
  }
  WorkMode mode = 1;
}

//切换全彩模式
message SwitchFullColorMode {
    bool enable = 1;
}

message ChangeMonitorResolution {
  string monitor_name = 1;
  int32 target_width = 2;
  int32 target_height = 3;
}

message ChangeMonitorResolutionResult {
  string monitor_name = 1;
  bool result = 2;
}

message ReqCtrlAltDelete {

}

message RendererAudioSpectrum {
  // from inner server
  int32 samples = 1;
  int32 channels = 2;
  int32 bits = 3;
  repeated double left_spectrum = 4;
  repeated double right_spectrum = 5;
}

// client->render
message ModifyFps {
    int32 fps = 1;
}

// render -> client
message DisconnectConnection {
  string device_id = 1;
  string stream_id = 2;
  string room_id = 3;
  string device_name = 4;
}

message Message {
  string device_id = 3;
  string stream_id = 4;
  // 消息序号
  uint64 sequence = 5;
  uint64 resp_sequence = 6;
  RespCode resp_code = 7;
  string resp_message = 8;
  string resp_data = 9;
  MessageType type = 10;
  uint64 send_time = 20;
  string extra = 30;
  Hello hello = 40;
  ServerConfiguration config = 41;
  Ack ack = 50;
  HeartBeat heartbeat = 60;
  OnHeartBeat on_heartbeat = 61;
  VideoFrame video_frame = 70;
  AudioFrame audio_frame = 80;
  KeyEvent key_event = 90;
  MouseEvent mouse_event = 100;
  CursorInfoSync cursor_info_sync = 110;
  GamepadState gamepad_state = 120;
  ClientStatistics client_statistics = 140;
  repeated OnlineGame online_games = 160;
  FileTransfer file_transfer = 180;
  RespFileTransfer resp_file_transfer = 190;
  ClipboardInfo clipboard_info = 200;
  ClipboardInfoResp clipboard_info_resp = 201;
  SwitchMonitor switch_monitor = 210;
  MonitorSwitched monitor_switched = 220;
  SwitchWorkMode work_mode = 230;
  ChangeMonitorResolution change_monitor_resolution = 240;
  ChangeMonitorResolutionResult change_monitor_resolution_result = 250;
  RendererAudioSpectrum renderer_audio_spectrum = 260;

   // file transfer begin
  FileOperateionsEvent file_operateions_event = 280;
  FileOperateRespRename file_operate_resp_rename = 285;
  FileOperateRespGetFileList file_operate_resp_get_file_list = 290;
  FileOperateRespCreateNewFolder file_operate_resp_create_new_folder = 295;
  FileOperateRespExists file_operate_resp_exists = 300;
  FileOperateRespDel file_operate_resp_del = 305;
  FileOperateRespBatchCreateFolders file_operate_resp_batch_create_folders = 310;
  FileTransRespUpload file_trans_resp_upload = 315;
  FileTransRespDownload file_trans_resp_download = 320;
  FileTransDirectControl file_trans_direct_control = 325;
  FileTransDataPacket file_trans_data_packet = 326;
  string file_conn_token = 327;
  FileTransDataPacketResponse file_trans_data_packet_response = 328;
  FileTransSaveFileException file_trans_save_file_exception = 330;
  // file transfer end

  ReqCtrlAltDelete req_ctrl_alt_delete = 340;

  ClipboardReqAtBegin cp_req_at_begin = 349;
  ClipboardReqBuffer cp_req_buffer = 350;
  ClipboardReqAtEnd cp_req_at_end = 351;
  ClipboardRespBuffer cp_resp_buffer = 360;

  // signaling begin
  SigOfferSdpMessage sig_offer_sdp = 370;
  SigAnswerSdpMessage sig_answer_sdp = 380;
  SigIceMessage sig_ice = 450;
  // signaling end

  SwitchFullColorMode switch_full_color_mode = 480;

  ModifyFps modify_fps = 490;
  DisconnectConnection disconnect_connection = 500;
}
