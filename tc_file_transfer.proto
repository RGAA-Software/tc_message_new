syntax = "proto3";

package tc;

// Return the result of renaming
message FileOperateRespRename {
	bool ret = 1;
	string path_of_old = 2;
	string path_of_new = 3;
	string msg_of_error = 4;
}

message FileDescInfo 
{
	enum FileType 
	{
		kDisk = 0;
		kFolder = 1;
		kFile = 2;
		kDeskFolder = 3;
	}
	FileType type = 1;
	string name = 2;
	string path = 3;
	uint64 size = 4;
	uint64 date = 5;
}
 
// Return file list
message FileOperateRespGetFileList {
	bool ret = 1;
	string msg_of_error = 2;
	repeated FileDescInfo file_infos = 3;
	string path = 4;
	string file_permission_path = 5;
}

// Return the result of creating a new folder
message FileOperateRespCreateNewFolder {
	bool ret = 1;
	string path_of_parent = 2;
	string path_of_new_created = 3;
	string msg_of_error = 4;
}

// Return whether the file exists
message FileOperateRespExists {
	bool ret = 1;
	string path = 2;
	uint64 size = 3;
	uint64 date = 4;
}

// Return the result of deleting a directory
message FileOperateRespDel {
	bool ret = 1;
	repeated string paths_of_no_del  = 2;
	string msg_of_error = 3;
}

// Return the result of batch creating folders
message FileOperateRespBatchCreateFolders {
	// List of directories that were not successfully created
	repeated string paths_of_no_create_folder = 1;
	string msg_of_error = 2;
}

// File transfer packet
message FileTransDataPacket {
	enum TransmitDirection {
		kUpload = 0;
		kDownload = 1;
	}
	enum TransmitState {
		kTransmitting = 0; // transferring
		kEnd = 1;          //  end of transmission
		kError = 2;        //  There is an abnormal situation
		kCancel = 3;       //  User cancellation
	}
	TransmitDirection transmit_direction = 1;
	string src_file_path = 2;
	string target_file_path = 3;
	uint64 file_size = 4;

	string task_id = 5;  
	// This task packet sequence
	uint64 index = 6;
	// Is it the last data packet
	TransmitState transmit_state  = 7;
	// file content
	bytes data = 8;
}

// File transfer packet response
message FileTransDataPacketResponse {
	string task_id = 1;  
	// This task packet sequence
	uint64 index = 2;
}

// Response to file upload
message FileTransRespUpload {
	enum UploadErrorCause {
		kFailedOpen = 0; // The file cannot be opened
		kFailedVerify = 1;   // verification failed
		kFailedWrite = 2;    // Exception occurred while writing the file
		kUnknow = 3;         // Unknown reason 
		kDirFailedCreate = 4;
		kPacketLoss = 5;
	}
	bool res = 1;
	UploadErrorCause error_cause = 2;
	string src_file_path = 3;
	string target_file_path = 4;
	string task_id = 5;
}

// Response to file download
message FileTransRespDownload {
	enum DownloadErrorCause {
		kFailedOpen = 0;     // The file cannot be opened
		kFailedRead = 1;    // Exception occurred while writing the file
		kUnknow = 2;         // User cancellation 
		kNoExists = 3;    
	}
	bool res = 1;
	DownloadErrorCause error_cause = 2;
	string src_file_path = 3;
	string target_file_path = 4;
	string task_id = 5;
}

// File transfer direction control, there are four options that can be set, [0 indicates disabled file transfer. 1 indicates one-way file transfer, control end to controlled end file transfer. 2 indicates one-way file transfer, controlled end to control end file transfer. 3 indicates bi-directional file transfer]
// Disabled Transfer Controlled end one-way transfer control end Control end one-way transfer controlled end Bi-directional
message FileTransDirectControl {
	int32 mode = 1;
}

message FileOperateionsEvent
{
	// File operation related
	enum OperateType
	{
		kDel = 0;
		kBatchCreateFolders = 1;
		kCreateNewFolder = 2;
		kIsExists = 3;
		kRename = 4;
		kGetFilesList = 5;
		kCancelDownload = 6;
		kCancelUpload = 7;
		kDownload = 8;
	}
	OperateType operate_type = 1;

	// List of files to be deleted
	repeated string paths_of_del = 2;

	// Folder to be created in bulk
	repeated string paths_of_create_folder = 3;

	// Create a new folder in this directory
	string path_of_create_new_folder = 4;

	// Determine if this file exists
	string path_of_judge_exists = 5;

	// rename
	string path_of_rename = 6;
	string name_of_rename = 7;

	// Retrieve the list of files and folders in this directory
	string path_of_filelist = 8;
	
	// task id
	string task_id = 9;

	// The file to be downloaded
	string path_of_download = 10;
	// The file path to be saved 
	string path_of_save = 11;
}

// Exception or user cancellation during file writing process
message FileTransSaveFileException {
	enum SaveFileExceptionCause {
		kFailedOpen = 0;     // The file cannot be opened
		kFailedWrite = 1;    // Exception occurred while writing the file
		kCancel = 2;         // User cancellation
		kDirFailedCreate = 3;
		kPacketLoss = 4;
		kUnknow = 5;
	}
	SaveFileExceptionCause error_cause = 1;
	string src_file_path = 2;
	string target_file_path = 3;
	string task_id = 4;
}

